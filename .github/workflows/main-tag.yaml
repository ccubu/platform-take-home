name: Deploy to GKE
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/takehome-api:${{ github.ref_name }} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/takehome-api:${{ github.ref_name }}

      - name: Check DRY_RUN Flag
        id: check-dry-run
        run: |
          if [ "${{ vars.DRY_RUN }}" = "true" ]; then
            echo "DRY_RUN is enabled. Skipping GKE configuration and deployment steps."
            echo "dry_run=true" >> $GITHUB_ENV
          else
            echo "DRY_RUN is disabled. Proceeding with GKE configuration and deployment."
            echo "dry_run=false" >> $GITHUB_ENV
          fi

      - name: Authenticate with GCP
        if: env.dry_run == 'false'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

      - name: Configure GKE Credentials
        if: env.dry_run == 'false'
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: europe-west1

      - name: Install Helm, Helm Diff Plugin, and Helmfile
        if: env.dry_run == 'false'
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh && ./get_helm.sh && rm -f get_helm.sh

          helm plugin install https://github.com/databus23/helm-diff --version v3.8.1

          URL=https://github.com/helmfile/helmfile/releases/download/v0.169.2/helmfile_0.169.2_linux_amd64.tar.gz
          mkdir helmfile && wget -q $URL -O - | tar -xz -C helmfile
          if [ -w /usr/local/bin ]; then SUDO=""; else SUDO="sudo"; fi
          $SUDO chmod +x ./helmfile/helmfile && $SUDO mv ./helmfile/helmfile /usr/local/bin && rm -rf ./helmfile

          helm version
          helm plugin list
          helmfile --version

      - name: Deploy to GKE
        if: env.dry_run == 'false'
        run: |
          cd deployment
          IMAGE_TAG=${{ github.ref_name }} helmfile --environment production diff
          IMAGE_TAG=${{ github.ref_name }} helmfile --environment production apply

      - name: Deployment Info
        if: env.dry_run == 'false'
        run: |
          echo "Waiting for the external IP of the LoadBalancer service..."

          SERVICE_NAME=takehome-api
          NAMESPACE=default
          TIMEOUT=300
          SLEEP_INTERVAL=10

          START_TIME=$(date +%s)
          while true; do
            EXTERNAL_IP=$(kubectl get service $SERVICE_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "External IP found: $EXTERNAL_IP"
              break
            fi

            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
              echo "Timeout reached while waiting for the external IP. Please check the service status."
              exit 1
            fi

            echo "External IP not available yet. Retrying in $SLEEP_INTERVAL seconds..."
            sleep $SLEEP_INTERVAL
          done

          echo "The external IP of the service is: $EXTERNAL_IP"
          echo "Example cURL commands to test the API:"

          echo "curl --location 'http://$EXTERNAL_IP/items' \\"
          echo "--header 'Content-Type: application/json' \\"
          echo "--data '{
              \"item\": {
                  \"description\": \"aliquip ut nostrud\",
                  \"id\": \"2244530311\",
                  \"name\": \"sed cupidatat esse\"
              }
          }'"

          echo "curl 'http://$EXTERNAL_IP/items'"